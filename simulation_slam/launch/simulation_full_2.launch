<launch>

  <include file="$(find simulation_world)/launch/gazebo_rviz.launch">
    <arg name="launch_rviz" value="false"/>
  </include>
  
    <!-- ======================================= ARGUMENTS ================================== -->
  <arg name="camera"                  default="realsense"/>
  <arg name="stereo"                  default="false"/>   <!-- RGB-D or stereo -->
  <arg name="rtabmapviz"              default="false" />   <!-- rviz or rtabmapviz -->
  <arg name="rviz"                    default="true" />
  <arg name="localization"            default="false"/>
  <arg name="use_sim_time"            default="false"/>   <!--use_sim_time, will be overwritten -->
  <param if="$(arg use_sim_time)" name="use_sim_time" value="true"/>
  <!-- === config files === -->
  <arg name="cfg"                     default="" /> <!-- To change RTAB-Map's parameters, set the path of config file (*.ini) generated by the standalone app -->\
  <arg name="gui_cfg"                 default="~/.ros/rtabmap_gui.ini" />
  <arg name="rviz_cfg"                default="$(find rtabmap_launch)/launch/config/rgbd.rviz" />
  <!-- === frames === -->
  <arg name="frame_id"                default="base_footprint"/>     <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
  <arg name="odom_frame_id"           default=""/>                <!-- If set, TF is used to get odometry instead of the topic -->
  <arg name="map_frame_id"            default="map"/>
  <arg name="publish_tf_map"          default="true"/>
  <arg name="ground_truth_frame_id"   default=""/>     <!-- e.g., "world" -->
  <arg name="ground_truth_base_frame_id" default=""/>  <!-- e.g., "tracker", a fake frame matching the frame "frame_id" (but on different TF tree) -->
  <arg name="namespace"               default="rtabmap"/>
  <arg name="database_path"           default="~/.ros/rtabmap.db"/>
  <arg name="queue_size"              default="10"/>
  <arg name="wait_for_transform"      default="0.2"/>
  <arg     if="$(arg localization)" name="rtabmap_args"  default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args"  default="--delete_db_on_start"/>
  <arg name="launch_prefix"           default=""/>              <!-- for debugging purpose, it fills launch-prefix tag of the nodes -->
  <arg name="output"                  default="screen"/>        <!-- Control node output (screen or log) -->
  <!-- if timestamps of the input topics are synchronized using approximate or exact time policy-->
  <!-- <arg     if="$(arg stereo)" name="approx_sync"  default="false"/> -->
  <arg unless="$(arg stereo)" name="approx_sync"  default="true"/>  
  <arg unless="$(arg stereo)" name="approx_sync_max_interval"  default="0.02"/>        
  <!-- === RGB-D related topics === -->
  <arg name="rgb_topic"               default="/$(arg camera)/color/image_raw" />
  <arg name="depth_topic"             default="/$(arg camera)/depth/image_rect_raw" />
  <arg name="camera_info_topic"       default="/$(arg camera)/color/camera_info" />
  <arg name="depth_camera_info_topic" default="/$(arg camera)/depth/camera_info"  />
  <!-- <?ignore -->
  <!-- === stereo related topics === -->
  <arg name="stereo_namespace"        default="/stereo_camera"/>
  <arg name="left_image_topic"        default="$(arg stereo_namespace)/left/image_rect_color" />
  <arg name="right_image_topic"       default="$(arg stereo_namespace)/right/image_rect" />      <!-- using grayscale image for efficiency -->
  <arg name="left_camera_info_topic"  default="$(arg stereo_namespace)/left/camera_info" />
  <arg name="right_camera_info_topic" default="$(arg stereo_namespace)/right/camera_info" />
  <!-- ?> -->
  <!-- Already synchronized RGB-D related topic, with rtabmap_ros/rgbd_sync nodelet -->
  <arg name="rgbd_sync"               default="false"/>         <!-- pre-sync rgb_topic, depth_topic, camera_info_topic -->
  <arg name="subscribe_rgbd"          default="$(arg rgbd_sync)"/>
  <arg name="approx_rgbd_sync"        default="true"/>          <!-- false=exact synchronization -->
  <arg name="rgbd_topic"              default="rgbd_image" />
  <arg name="depth_scale"             default="1.0" />
  <!-- === transport === -->
  <arg name="compressed"              default="false"/>         <!-- If you want to subscribe to compressed image topics -->
  <arg name="rgb_image_transport"     default="compressed"/>    <!-- Common types: compressed, theora (see "rosrun image_transport list_transports") -->
  <arg name="depth_image_transport"   default="compressedDepth"/>  <!-- Depth compatible types: compressedDepth (see "rosrun image_transport list_transports") -->
  <!-- === scan === -->
  <arg name="subscribe_scan"          default="false"/>
  <arg name="scan_topic"              default="/scan"/>
  <arg name="subscribe_scan_cloud"    default="false"/>
  <arg name="scan_cloud_topic"        default="/scan_cloud"/>
  <arg name="scan_normal_k"           default="0"/>
  <!-- === odom === -->
  <arg name="publish_tf_odom"          default="true"/>
  <arg name="visual_odometry"         default="true"/>          <!-- Launch rtabmap visual odometry node -->
  <arg name="icp_odometry"            default="false"/>         <!-- Launch rtabmap icp odometry node -->
  <arg name="odom_topic"              default="odom"/>          <!-- Odometry topic name -->
  <arg name="vo_frame_id"             default="$(arg odom_topic)"/> <!-- Visual/Icp odometry frame ID for TF -->
  <arg name="odom_tf_angular_variance"  default="1"/>             <!-- If TF is used to get odometry, this is the default angular variance -->
  <arg name="odom_tf_linear_variance" default="1"/>             <!-- If TF is used to get odometry, this is the default linear variance -->
  <arg name="odom_args"               default=""/>              <!-- More arguments for odometry (overwrite same parameters in rtabmap_args) -->
  <arg name="odom_sensor_sync"        default="false"/>
  <arg name="odom_guess_frame_id"     default=""/>
  <arg name="odom_guess_min_translation" default="0"/>
  <arg name="odom_guess_min_rotation"  default="0"/> 
  <arg name="imu_topic"                default="/imu"/>          <!-- only used with VIO approaches -->
  <!-- === user_data === -->
  <arg name="subscribe_user_data"      default="false"/>             <!-- user data synchronized subscription -->
  <arg name="user_data_topic"          default="/user_data"/>
  <arg name="user_data_async_topic"    default="/user_data_async" /> <!-- user data async subscription (rate should be lower than map update rate) -->
  <!-- === do not modify === -->
  <arg if="$(arg compressed)"     name="rgb_topic_relay"           default="$(arg rgb_topic)_relay"/>
  <arg if="$(arg compressed)"     name="depth_topic_relay"         default="$(arg depth_topic)_relay"/>
  <arg if="$(arg compressed)"     name="left_image_topic_relay"    default="$(arg left_image_topic)_relay"/>
  <arg if="$(arg compressed)"     name="right_image_topic_relay"   default="$(arg right_image_topic)_relay"/>
  <arg unless="$(arg compressed)" name="rgb_topic_relay"           default="$(arg rgb_topic)"/>
  <arg unless="$(arg compressed)" name="depth_topic_relay"         default="$(arg depth_topic)"/>
  <arg unless="$(arg compressed)" name="left_image_topic_relay"    default="$(arg left_image_topic)"/>
  <arg unless="$(arg compressed)" name="right_image_topic_relay"   default="$(arg right_image_topic)"/>
  <!-- === SLAM === -->
  <arg name="GridCellSize"                    value="0.02"/>
  <arg name="OdomStrategy"                    value="1"/>
  <arg name="VisCorType"                      value="1"/>
  <arg name="OdomF2MMaxSize"                  value="1000"/><!-- reduced maximum features map size-->
  <arg name="VisMaxFeatures"                  value="600"/> <!-- reduced maximum features extracted by image-->
  <arg name="RtabmapStartNewMapOnLoopClosure" value="true"/>
  <arg name="RegForce3DoF"                    value="true" />
  <arg name="OptimizerSlam2D"                 value="true" />
  <arg name="grid_size"                       value="50"/> <!-- 50 meters wide -->
  <arg name="cloud_noise_filtering_radius"    value="0.05"/>
  <arg name="cloud_noise_filtering_min_neighbors" value="2"/>
  <arg name="proj_max_ground_angle"           value="25"/>
  <arg name="proj_max_ground_height"          value="0.1"/>
  <arg name="proj_max_height"                 value="2.0"/>
  <arg name="proj_min_cluster_size"           value="20"/>


  <group ns="$(arg namespace)"><!-- ***** main group => stero&not, icp_odometry&not, rtabmap, rtabmapviz ******-->

    <!-- =============================== if not stereo =============================== -->
    <group unless="$(arg stereo)"> <!-- {i} -->
      <group unless="$(arg subscribe_rgbd)"> <!-- {i,o,o} -->
        <node if="$(arg compressed)" name="republish_rgb" type="republish" pkg="image_transport" args="$(arg rgb_image_transport) in:=$(arg rgb_topic) raw out:=$(arg rgb_topic_relay)" />
        <node if="$(arg compressed)" name="republish_depth" type="republish" pkg="image_transport" args="$(arg depth_image_transport) in:=$(arg depth_topic) raw out:=$(arg depth_topic_relay)" />
      </group>
      <group if="$(arg rgbd_sync)"> <!-- {o} -->
        <node if="$(arg compressed)" name="republish_rgb" type="republish" pkg="image_transport" args="$(arg rgb_image_transport) in:=$(arg rgb_topic) raw out:=$(arg rgb_topic_relay)" />
        <node if="$(arg compressed)" name="republish_depth" type="republish" pkg="image_transport" args="$(arg depth_image_transport) in:=$(arg depth_topic) raw out:=$(arg depth_topic_relay)" />
        <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="$(arg output)">
          <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
          <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
          <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
          <remap from="rgbd_image"      to="$(arg rgbd_topic)"/>
          <param name="approx_sync"     type="bool"   value="$(arg approx_rgbd_sync)"/>
          <param name="queue_size"      type="int"    value="$(arg queue_size)"/>
          <param name="depth_scale"     type="double" value="$(arg depth_scale)"/>
        </node>
      </group>
    </group>
    <group unless="$(arg rgbd_sync)"> <!-- {i,o} -->
       <node if="$(arg subscribe_rgbd)" name="republish_rgbd_image"  type="relay" pkg="topic_tools" args="$(arg rgbd_topic) $(arg rgbd_topic)_relay" />
    </group>
  
    <!-- ===================== RGB-D Odometry ======================= -->
    <group unless="$(arg icp_odometry)">
    <group if="$(arg visual_odometry)">
      <node pkg="rtabmap_odom" type="rgbd_odometry" name="rgbd_odometry" output="$(arg output)" args="$(arg rtabmap_args) $(arg odom_args)" launch-prefix="$(arg launch_prefix)">
        <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
        <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
        <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
        <remap     if="$(arg rgbd_sync)" from="rgbd_image" to="$(arg rgbd_topic)"/>
        <remap unless="$(arg rgbd_sync)" from="rgbd_image" to="$(arg rgbd_topic)_relay"/>
        <remap from="odom"            to="$(arg odom_topic)"/>
        <param name="frame_id"                    type="string" value="$(arg frame_id)"/>
        <param name="publish_tf"                  type="bool"   value="$(arg publish_tf_odom)"/>
        <param name="odom_frame_id"               type="string" value="$(arg vo_frame_id)"/>
        <param name="ground_truth_frame_id"       type="string" value="$(arg ground_truth_frame_id)"/>
        <param name="ground_truth_base_frame_id"  type="string" value="$(arg ground_truth_base_frame_id)"/>
        <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
        <param name="approx_sync"                 type="bool"   value="$(arg approx_sync)"/>
        <param name="config_path"                 type="string" value="$(arg cfg)"/>
        <param name="queue_size"                  type="int"    value="$(arg queue_size)"/>
        <param name="subscribe_rgbd"              type="bool"   value="$(arg subscribe_rgbd)"/>
        <param name="guess_frame_id"              type="string" value="$(arg odom_guess_frame_id)"/>
        <param name="guess_min_translation"       type="double" value="$(arg odom_guess_min_translation)"/>
        <param name="guess_min_rotation"          type="double" value="$(arg odom_guess_min_rotation)"/>
        <!--advance param-->
        <!-- default 5 pixels -->
        <!-- <param name="GFTT/MinDistance" type="string" value="10"/> -->
        <param name="Odom/ResetCountdown"              value="1" />
        <param name="Reg/Force3DoF"    value="true" />
      </node>
    </group>
    </group>

    <!-- ========================================== rtabmap =============================================== -->
    <node pkg="rtabmap_slam" name="rtabmap" type="rtabmap" output="$(arg output)" args="$(arg rtabmap_args)" launch-prefix="$(arg launch_prefix)">
      <remap from="scan"                   to="$(arg scan_topic)"/>
      <remap from="odom"                   to="$(arg odom_topic)"/>
      <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
      <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      <remap     if="$(arg rgbd_sync)" from="rgbd_image" to="$(arg rgbd_topic)"/>
      <remap unless="$(arg rgbd_sync)" from="rgbd_image" to="$(arg rgbd_topic)_relay"/>
      <remap from="left/image_rect"        to="$(arg left_image_topic_relay)"/>
      <remap from="right/image_rect"       to="$(arg right_image_topic_relay)"/>
      <remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
      <remap from="scan_cloud"             to="$(arg scan_cloud_topic)"/>
      <remap from="user_data"              to="$(arg user_data_topic)"/>
      <remap from="user_data_async"        to="$(arg user_data_async_topic)"/>
      
      <param     if="$(arg stereo)" name="subscribe_depth"  type="bool" value="false"/>
      <param unless="$(arg stereo)" name="subscribe_depth"  type="bool" value="true"/>
      <param name="subscribe_rgbd"       type="bool"   value="$(arg subscribe_rgbd)"/>
      <param name="subscribe_stereo"     type="bool"   value="$(arg stereo)"/>
      <param name="subscribe_scan"       type="bool"   value="$(arg subscribe_scan)"/>
      <param name="subscribe_scan_cloud" type="bool"   value="$(arg subscribe_scan_cloud)"/>
      <param name="subscribe_user_data"  type="bool"   value="$(arg subscribe_user_data)"/>
      <param if="$(arg visual_odometry)" name="subscribe_odom_info" type="bool" value="true"/>
      <param if="$(arg icp_odometry)"    name="subscribe_odom_info" type="bool" value="true"/>
      <param name="frame_id"             type="string" value="$(arg frame_id)"/>
      <param name="publish_tf"           type="bool"   value="$(arg publish_tf_map)"/>
      <param name="map_frame_id"         type="string" value="$(arg map_frame_id)"/>
      <param name="odom_frame_id"        type="string" value="$(arg odom_frame_id)"/>
      <param name="ground_truth_frame_id"       type="string" value="$(arg ground_truth_frame_id)"/>
      <param name="ground_truth_base_frame_id"  type="string" value="$(arg ground_truth_base_frame_id)"/>
      <param name="odom_tf_angular_variance" type="double" value="$(arg odom_tf_angular_variance)"/>
      <param name="odom_tf_linear_variance"  type="double" value="$(arg odom_tf_linear_variance)"/>
      <param name="odom_sensor_sync"         type="bool"   value="$(arg odom_sensor_sync)"/>
      <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
      <param name="database_path"        type="string" value="$(arg database_path)"/>
      <param name="approx_sync"          type="bool"   value="$(arg approx_sync)"/>
      <param name="approx_sync_max_interval" type="double"   value="$(arg approx_sync_max_interval)"/>
      <param name="config_path"          type="string" value="$(arg cfg)"/>
      <param name="queue_size"           type="int" value="$(arg queue_size)"/>
      <param name="scan_normal_k"        type="int" value="$(arg scan_normal_k)"/>
      <!-- if localization mode -->
      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
      <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
      <!--nav-->
      <param name="use_action_for_goal"     type="bool"   value="true"/>
      <!-- advance rtabmap param -->
      <!-- for visual odom-->
      <param name="Grid/CellSize" type="Double" value="$(arg GridCellSize)"/> <!--1:F2F vs 0:F2M-->
      <param name="Odom/Strategy" value="$(arg OdomStrategy)"/> <!--1:F2F vs 0:F2M-->
      <param name="Vis/CorType" value="$(arg VisCorType)"/> <!--using Optical Flow matching Correspondences insead of feature matching -->
      <param name="OdomF2M/MaxSize" type="string" value="$(arg OdomF2MMaxSize)"/><!-- reduced maximum features map size-->
      <param name="Vis/MaxFeatures" type="string" value="$(arg VisMaxFeatures)"/> <!-- reduced maximum features extracted by image-->
      <param name="Rtabmap/StartNewMapOnLoopClosure" value="$(arg RtabmapStartNewMapOnLoopClosure)"/>
      <param name="Reg/Force3DoF"    value="$(arg RegForce3DoF)" />
      <param name="Optimizer/Slam2D" value="$(arg OptimizerSlam2D)" />
      <param name="grid_size" type="double" value="$(arg grid_size)"/> <!-- 50 meters wide -->
      <param name="cloud_noise_filtering_radius" value="$(arg cloud_noise_filtering_radius)"/>
      <param name="cloud_noise_filtering_min_neighbors" value="$(arg cloud_noise_filtering_min_neighbors)"/>
      <param name="proj_max_ground_angle" value="$(arg proj_max_ground_angle)"/>
      <param name="proj_max_ground_height" value="$(arg proj_max_ground_height)"/>
      <param name="proj_max_height" value="$(arg proj_max_height)"/>
      <param name="proj_min_cluster_size" value="$(arg proj_min_cluster_size)"/>
    </node>

    <!-- ======================================if rtabmapviz ==========================-->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_rviz" name="rtabmap_viz" type="rtabmapviz" output="$(arg output)" launch-prefix="$(arg launch_prefix)">
      <param     if="$(arg stereo)" name="subscribe_depth"  type="bool" value="false"/>
      <param unless="$(arg stereo)" name="subscribe_depth"  type="bool" value="true"/>
      <param name="subscribe_rgbd"       type="bool"   value="$(arg subscribe_rgbd)"/>
      <param name="subscribe_stereo"     type="bool"   value="$(arg stereo)"/>
      <param name="subscribe_scan"       type="bool"   value="$(arg subscribe_scan)"/>
      <param name="subscribe_scan_cloud" type="bool"   value="$(arg subscribe_scan_cloud)"/>
      <param if="$(arg visual_odometry)" name="subscribe_odom_info" type="bool" value="true"/>
      <param if="$(arg icp_odometry)"    name="subscribe_odom_info" type="bool" value="true"/>
      <param name="frame_id"             type="string" value="$(arg frame_id)"/>
      <param name="odom_frame_id"        type="string" value="$(arg odom_frame_id)"/>
      <param name="wait_for_transform_duration" type="double"   value="$(arg wait_for_transform)"/>
      <param name="queue_size"           type="int"    value="$(arg queue_size)"/>
      <param name="approx_sync"          type="bool"   value="$(arg approx_sync)"/>
      <param name="approx_sync_max_interval" type="double"   value="$(arg approx_sync_max_interval)"/>
      <remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
      <remap from="depth/image"     to="$(arg depth_topic_relay)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      <remap     if="$(arg rgbd_sync)" from="rgbd_image" to="$(arg rgbd_topic)"/>
      <remap unless="$(arg rgbd_sync)" from="rgbd_image" to="$(arg rgbd_topic)_relay"/>
      <remap from="left/image_rect"        to="$(arg left_image_topic_relay)"/>
      <remap from="right/image_rect"       to="$(arg right_image_topic_relay)"/>
      <remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
      <remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
      <remap from="scan"                   to="$(arg scan_topic)"/>
      <remap from="scan_cloud"             to="$(arg scan_cloud_topic)"/>
      <remap from="odom"                   to="$(arg odom_topic)"/>
    </node>
  </group> <!-- *************** main group ends ***************** -->

  <!-- ==================================== else if RVIZ ============================-->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(arg rviz_cfg)"/>
     
</launch>

